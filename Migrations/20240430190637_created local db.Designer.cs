// <auto-generated />
using System;
using Arm_mo.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Arm_mo.Migrations
{
    [DbContext(typeof(Arm_moContext))]
    [Migration("20240430190637_created local db")]
    partial class createdlocaldb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Arm_mo.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MentalObjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MentalObjectId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Arm_mo.Models.AhaMoment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("AhaMoments");
                });

            modelBuilder.Entity("Arm_mo.Models.Meditator", b =>
                {
                    b.Property<int>("MeditatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeditatorID"));

                    b.Property<string>("CurrentStage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeditatorID");

                    b.ToTable("Meditators");
                });

            modelBuilder.Entity("Arm_mo.Models.NewlyMasteredStage", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("SessionId", "StageId");

                    b.HasIndex("StageId");

                    b.ToTable("NewlyMasteredStage");
                });

            modelBuilder.Entity("Arm_mo.Models.ObservableObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intensity")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("ObservableObjects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ObservableObject");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Arm_mo.Models.PracticedStage", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("SessionId", "StageId");

                    b.HasIndex("StageId");

                    b.ToTable("PracticedStage");
                });

            modelBuilder.Entity("Arm_mo.Models.ProfilePicture", b =>
                {
                    b.Property<int>("ProfilePictureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfilePictureID"));

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeditatorID")
                        .HasColumnType("int");

                    b.HasKey("ProfilePictureID");

                    b.HasIndex("MeditatorID")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("Arm_mo.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeditatorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeditatorID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Arm_mo.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intentions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMastered")
                        .HasColumnType("bit");

                    b.Property<string>("MasteryRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obstacles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Arm_mo.Models.Step", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActivityId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("Arm_mo.Models.UserUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("UsageTime")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserUsage");
                });

            modelBuilder.Entity("Arm_mo.Models.MentalObject", b =>
                {
                    b.HasBaseType("Arm_mo.Models.ObservableObject");

                    b.Property<int?>("FeelingToneValue")
                        .HasColumnType("int");

                    b.Property<int>("MentalObjectType")
                        .HasColumnType("int");

                    b.Property<int?>("MentalStateValue")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MentalObject");
                });

            modelBuilder.Entity("Arm_mo.Models.SensoryStimulus", b =>
                {
                    b.HasBaseType("Arm_mo.Models.ObservableObject");

                    b.Property<int>("SensoryStimulustype")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SensoryStimulus");
                });

            modelBuilder.Entity("Arm_mo.Models.Activity", b =>
                {
                    b.HasOne("Arm_mo.Models.MentalObject", "MentalObject")
                        .WithMany()
                        .HasForeignKey("MentalObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentalObject");
                });

            modelBuilder.Entity("Arm_mo.Models.AhaMoment", b =>
                {
                    b.HasOne("Arm_mo.Models.Session", null)
                        .WithMany("AhaMoments")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("Arm_mo.Models.NewlyMasteredStage", b =>
                {
                    b.HasOne("Arm_mo.Models.Session", "Session")
                        .WithMany("NewlyMasterdStages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arm_mo.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Arm_mo.Models.ObservableObject", b =>
                {
                    b.HasOne("Arm_mo.Models.Session", null)
                        .WithMany("ObservableObjects")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("Arm_mo.Models.PracticedStage", b =>
                {
                    b.HasOne("Arm_mo.Models.Session", "Session")
                        .WithMany("PracitcedStages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arm_mo.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Arm_mo.Models.ProfilePicture", b =>
                {
                    b.HasOne("Arm_mo.Models.Meditator", null)
                        .WithOne("profilePicture")
                        .HasForeignKey("Arm_mo.Models.ProfilePicture", "MeditatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Arm_mo.Models.Session", b =>
                {
                    b.HasOne("Arm_mo.Models.Meditator", "Meditator")
                        .WithMany()
                        .HasForeignKey("MeditatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meditator");
                });

            modelBuilder.Entity("Arm_mo.Models.Step", b =>
                {
                    b.HasOne("Arm_mo.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Arm_mo.Models.UserUsage", b =>
                {
                    b.HasOne("Arm_mo.Models.Meditator", "User")
                        .WithMany("UserUsages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Arm_mo.Models.Meditator", b =>
                {
                    b.Navigation("UserUsages");

                    b.Navigation("profilePicture")
                        .IsRequired();
                });

            modelBuilder.Entity("Arm_mo.Models.Session", b =>
                {
                    b.Navigation("AhaMoments");

                    b.Navigation("NewlyMasterdStages");

                    b.Navigation("ObservableObjects");

                    b.Navigation("PracitcedStages");
                });
#pragma warning restore 612, 618
        }
    }
}
